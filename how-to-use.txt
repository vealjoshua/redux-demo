How to use the downloaded files

1) Run "npm install" in the extracted folder
2) Run "npm start" to view the project

Compare my code to yours to solve issues you might encounter. You may also copy the content of src/ into your own project's src/ folder to use your project setup (which might've been created with a different create-react-app version) and still use my code.

1. Setting Up the Reducer and Store

    Show users the stand-alone function of redux by create a node.js file containing a store and reducer and output the state. npm install --save redux

// Initial State
// Reducer
// Store
// Subscription
// Dispatching Action

2. Dispacting Actions

    Create 2 store.dispatch to show users how to dispatch an action. Create action.type case handling in the rootReducer to update the store. Remember not to mutate the state!

3. Adding Subscriptions

    Show how to add subscriptions to the store to get updated whenever an action is dispatched.

4. Connecting React to Redux

    The store should be created right before the application starts (index.js).
    Create a reducer file that returns the state. Create a store in index.js.

5. Connecting the Store to React

    npm install --save react-redux
    import Provider. Allows us to inject store into React components.
    How to get the counter value from the store into the Counter container? (What is a container?)
    We don't change the pattern of a few selected components getting the state and passing it on.
    import { connect } from 'react-redux' to connect container to store. connect is a curried function.
    connect takes a function: mapReduxStateToContainerProps. 
    The state in the container manages internal state.
    Update react and react-dom to 16.6.0

6. Dispatching Actions from within the Container

    Connect takes another argument: mapDispatchActionsToContainerProps
    This function returns an object with onIncrementCounter.
    Update CounterControl to use this.props.onIncrementCounter.
    Update reducer with if statement to handle 'INCREMENT' case
    Give 5 minutes for users to complete DECREMENT, ADD, SUBTRACT

7. Assignment: Passing and Retrieving Data with Action

    Give 5 minutes to fill out the rest of the actions.

8. Switch-Case in the Reducer

    Change out the if statements for switch cases

9. Updating State Immutably

    Add results to initialState.
    Add <hr />
        <button>Store Result</button>
        <ul>
            <li></li>
        </ul>
    to Counter.js
    Add onStoreResult and onDeleteResult to mapStateToProps.
    Add the onClick props to the button and li.
    Why isn't anything happening when they are clicked? The actions have to be handled in the reducer.
    Add spread operator to each case. 
    On storeResult, create a new resuls array with state.results.concat(state.counter)
    Add storeResult to the container props. 
    map out storedResult to li elements.

10. Updating Arrays Immutably

    What is wrong with state.results.splice(id, 1) since we want to change the original array anyway?
    Mutating the original state makes the state unpredictable.
    Use filter to create an updated array.
    const updatedArray = state.results.filter(
        result => result.id !== action.resultElId
      );
    Update the dispatch payload and the onClick prop of the li.

    https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns

11. Outsourcing Action Types

    It's a good practice to outsource actions to reduce bugs typos.
    Create an actions.js file and export const actions.
    import * as actionTypes from './actions' in reducer.js
    If a case is mispelled, the compiler throws an error.
    Replace actionTypes in reducer and Counter

12. Combining Multiple Reducers

    Split up the rudecers in reducer.js. This will help the code scale as more code is added.
    Create a reducers folder. Create 2 files counter, result (the 2 states) in the reducers folder.
    Copy reducer code to both files. Update actions import. The counter is still being access in result.js because the reducers are going to be combined in the end.
    Delete reducer.js
    Import the reducers into index.js
    Import combineReducers
    Combine the reducers.
    const rootReducer = combineReducers({
        ctr: counterReducer,
        res: resultReducer
    })
    Update mapReduxStateToContainerProps with state.ctr.counter, state.res.result. Combining reducers adds another layer.
    There's an error now. The reducer function only has access to the local state, not the global state.
    Update result.js with action.result instead of state.counter
    Update Counter.js by passing result into dispatch, sending the result in the payload, and passing the counter in the button onClick.
    Changed the list key to index. Deleted Counter.js CounterChangedHandler and state.

13. Adding Middleware

    Add a logger to index.js.
    next is used to execute the next function in the process.
    const logger = store => {
    return next => {
        return action => {
        return action => {
            console.log("[Middlewar] Dispatching", action);
            const result = next(action);
            console.log("[Middleware] next state", store.getState());
            return result;
        };
        };
    };
    };
    import applyMiddleware from redux
    Use applyMiddleware in the createStore function and apply the logger.

13. Using the Redux Devtools

    Google redux DevTools. Add to Chrome. Copy window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ from Advanced store setup since we're using middleware.
    Import compose from redux in index.js. Wrap applyMiddleware with composeEnhancers.
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

14. Introduction Action Creators
    We don't have any async code in result.js. The reducer runs synchronously. The switch statement will be done by the time the asynchronous function completes.
    So how do we run async code?
    Create an actions folder and move the actions file in the store.
    An Action Creator is a function that returns an action. An actionCreator would replace the js object in the dispatch methods.
    Get rid of actionTypes import in Counter. Replace dispatch object with action creator. import the functions from actions and replace.
    Give them 5 minutes to replace them all.
    It is now working with synchronous code. Let's do asynchronous code next.