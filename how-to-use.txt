How to use the downloaded files

1) Run "npm install" in the extracted folder
2) Run "npm start" to view the project

Compare my code to yours to solve issues you might encounter. You may also copy the content of src/ into your own project's src/ folder to use your project setup (which might've been created with a different create-react-app version) and still use my code.

1. Setting Up the Reducer and Store

    Show users the stand-alone function of redux by create a node.js file containing a store and reducer and output the state. npm install --save redux

// Initial State
// Reducer
// Store
// Subscription
// Dispatching Action

2. Dispacting Actions

    Create 2 store.dispatch to show users how to dispatch an action. Create action.type case handling in the rootReducer to update the store. Remember not to mutate the state!

3. Adding Subscriptions

    Show how to add subscriptions to the store to get updated whenever an action is dispatched.

4. Connecting React to Redux

    The store should be created right before the application starts (index.js).
    Create a reducer file that returns the state. Create a store in index.js.

5. Connecting the Store to React

    npm install --save react-redux
    import Provider. Allows us to inject store into React components.
    How to get the counter value from the store into the Counter container? (What is a container?)
    We don't change the pattern of a few selected components getting the state and passing it on.
    import { connect } from 'react-redux' to connect container to store. connect is a curried function.
    connect takes a function: mapReduxStateToContainerProps. 
    The state in the container manages internal state.
    Update react and react-dom to 16.6.0

6. Dispatching Actions from within the Container

    Connect takes another argument: mapDispatchActionsToContainerProps
    This function returns an object with onIncrementCounter.
    Update CounterControl to use this.props.onIncrementCounter.
    Update reducer with if statement to handle 'INCREMENT' case
    Give 5 minutes for users to complete DECREMENT, ADD, SUBTRACT

7. Assignment: Passing and Retrieving Data with Action

    Give 5 minutes to fill out the rest of the actions.

8. Switch-Case in the Reducer

    Change out the if statements for switch cases

9. Updating State Immutably

    Add results to initialState.
    Add <hr />
        <button>Store Result</button>
        <ul>
            <li></li>
        </ul>
    to Counter.js
    Add onStoreResult and onDeleteResult to mapStateToProps.
    Add the onClick props to the button and li.
    Why isn't anything happening when they are clicked? The actions have to be handled in the reducer.
    Add spread operator to each case. 
    On storeResult, create a new resuls array with state.results.concat(state.counter)
    Add storeResult to the container props. 
    map out storedResult to li elements.

10. Updating Arrays Immutably

    What is wrong with state.results.splice(id, 1) since we want to change the original array anyway?
    Mutating the original state makes the state unpredictable.
    Use filter to create an updated array.
    const updatedArray = state.results.filter(
        result => result.id !== action.resultElId
      );
    Update the dispatch payload and the onClick prop of the li.